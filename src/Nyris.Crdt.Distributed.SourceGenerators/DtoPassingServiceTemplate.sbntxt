//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Nyris.Crdt.Distributed.Model;
using Microsoft.Extensions.Logging;

namespace Nyris.Crdt.Distributed
{
    internal sealed class DtoPassingService : IDtoPassingService
    {
        private readonly ManagedCrdtContext _context;
        private readonly ILogger<DtoPassingService> _logger;

        public DtoPassingService(ManagedCrdtContext context, ILogger<DtoPassingService> logger)
        {
            _context = context;
            _logger = logger;
        }

        public IAsyncEnumerable<HashAndInstanceId> GetHashesAsync(string typeName)
        {
            return _context.GetHashesAsync(typeName);
        }
        {{~ for type in CrdtInfos ~}}

        public async IAsyncEnumerable<WithId<{{ type.DtoTypeName }}>> EnumerateCrdtAsync(IAsyncEnumerable<WithId<{{ type.DtoTypeName }}>> dtos)
        {
            string? id = null;
            await foreach(var dto in dtos)
            {
                if (id == null) id = dto.Id;
                _logger.LogDebug("Received dto for id='{Id}': {Dto}", id, JsonSerializer.Serialize(dto));
                await _context.MergeAsync<{{ type.CrdtTypeName }}, {{ type.AllArgumentsString }}>(dto);
            }

            if (id == null) yield break;
            await foreach(var dto in _context.EnumerateDtoBatchesAsync<{{ type.CrdtTypeName }}, {{ type.AllArgumentsString }}>(id))
            {
                yield return dto;
            }
        }

        public Task<{{ type.DtoTypeName }}> SendAsync(WithId<{{ type.DtoTypeName }}> dto)
        {
            return _context.MergeAsync<{{ type.CrdtTypeName }}, {{ type.AllArgumentsString }}>(dto);
        }
        {{~ end ~}}
    }
}