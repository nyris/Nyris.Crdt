//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using Nyris.Crdt.Distributed.Crdts.Abstractions;
using Nyris.Crdt.Distributed.Exceptions;
using Nyris.Crdt.Distributed.Model;
using Nyris.Crdt.Distributed.Utils;
using ProtoBuf.Grpc;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace Nyris.Crdt.Distributed
{
    internal sealed class ManagedCrdtService : IManagedCrdtService
    {
        private readonly ManagedCrdtContext _context;
        private readonly ILogger<ManagedCrdtService> _logger;

{{~ for type in DtoInfos ~}}
{{~ if type.CrdtInfos.size > 1 ~}}
    {{~ for crdtInfo in type.CrdtInfos ~}}
        private static readonly string {{crdtInfo.SafeTypeName}} = TypeNameCompressor.GetName<{{crdtInfo.TypeName}}>();
    {{~ end ~}}
{{~ end ~}}
{{~ end ~}}

        public ManagedCrdtService(ManagedCrdtContext context, ILogger<ManagedCrdtService> logger)
        {
            _context = context;
            _logger = logger;
        }

        public async Task<byte[]> GetHashAsync(TypeNameAndInstanceId nameAndInstanceId, CancellationToken cancellationToken = default)
        {
            var hash = _context.GetHash(nameAndInstanceId).ToArray();
            // _logger.LogDebug("Sending hash '{Hash}' for {CrdtName}: {InstanceId}",
            //     Convert.ToHexString(hash), nameAndInstanceId.TypeName, nameAndInstanceId.InstanceId);
            return hash;
        }

{{~ for op in OperationInfos ~}}
        public Task<{{ op.OperationResponseType }}> ApplyAsync(CrdtOperation<{{ op.OperationType }}> operation, CancellationToken cancellationToken = default)
        {
            _logger.LogDebug("Received operation: {Dto}", JsonConvert.SerializeObject(operation));
            return _context.ApplyAsync<{{ op.CrdtTypeParams }}, {{ op.OperationType }}, {{ op.OperationResponseType }}>(operation.ShardId, operation.Operation, operation.InstanceId, operation.TraceId, operation.PropagateToNodes, cancellationToken);
        }
{{~ end ~}}

{{~ for type in DtoInfos ~}}
{{~ if type.CrdtInfos.size == 1 ~}}
        public IAsyncEnumerable<{{ type.DtoTypeName }}> EnumerateCrdtAsync(IAsyncEnumerable<{{ type.DtoTypeName }}> dtos, CallContext context = default)
        {
            return EnumerateCrdtAsync<{{ type.CrdtInfos[0].TypeName }}, {{ type.CrdtInfos[0].AllArgumentsString }}>(dtos, context);
        }

        public async Task<{{ type.DtoTypeName }}> SendAsync(DtoMessage<{{ type.DtoTypeName }}> dto, CancellationToken cancellationToken = default)
        {
            // _logger.LogDebug("TraceId {TraceId}: Received dto for id='{Id}': {Dto}", dto.TraceId, dto.InstanceId, JsonConvert.SerializeObject(dto));
            var result = await _context.MergeAsync<{{ type.CrdtInfos[0].TypeName }}, {{ type.CrdtInfos[0].AllArgumentsString }}>(dto.Value,
                dto.InstanceId,
                propagationCounter: dto.PropagationCounter > 0 ? dto.PropagationCounter - 1 : 0,
                traceId: dto.TraceId,
                cancellationToken: cancellationToken);
            _logger.LogDebug("TraceId {TraceId}: finished executing {FuncName}", dto.TraceId, nameof(SendAsync));
            return result;
        }
{{~ else ~}}

        public IAsyncEnumerable<{{ type.DtoTypeName }}> EnumerateCrdtAsync(IAsyncEnumerable<{{ type.DtoTypeName }}> dtos, CallContext context = default)
        {
            var crdtTypeName = context.RequestHeaders.GetValue("crdt-type-name");
            if (string.IsNullOrEmpty(crdtTypeName))
            {
                throw new GeneratedCodeExpectationsViolatedException($"Method {nameof(EnumerateCrdtAsync)} expected a CrdtTypeName header to be present, but found none");
            }

    {{~ for crdtInfo in type.CrdtInfos ~}}
            if ({{ crdtInfo.SafeTypeName }}.Equals(crdtTypeName, StringComparison.OrdinalIgnoreCase))
            {
                return EnumerateCrdtAsync<{{ crdtInfo.TypeName }}, {{ crdtInfo.AllArgumentsString }}>(dtos, context);
            }
    {{~ end ~}}

            throw new GeneratedCodeExpectationsViolatedException($"Name {crdtTypeName} and dto {typeof({{ type.DtoTypeName }})} corresponds to no known actual Crdt type. Something went wrong during code generation");
        }

        public Task<{{ type.DtoTypeName }}> SendAsync(DtoMessage<{{ type.DtoTypeName }}> msg, CancellationToken cancellationToken = default)
        {
            // _logger.LogDebug("Received dto for type='{TypeName}' and id='{Id}': {Dto}",
            //    msg.TypeName, msg.InstanceId, JsonConvert.SerializeObject(msg));

    {{~ for crdtInfo in type.CrdtInfos ~}}
            if ({{ crdtInfo.SafeTypeName }}.Equals(msg.TypeName, StringComparison.OrdinalIgnoreCase))
            {
                return _context.MergeAsync<{{ crdtInfo.TypeName }}, {{ crdtInfo.AllArgumentsString }}>(msg.Value,
                    msg.InstanceId,
                    propagationCounter: msg.PropagationCounter > 0 ? msg.PropagationCounter - 1 : 0,
                    traceId: msg.TraceId,
                    cancellationToken: cancellationToken);
            }
    {{~ end ~}}

            throw new GeneratedCodeExpectationsViolatedException($"Name {msg.TypeName} and dto {typeof({{ type.DtoTypeName }})} corresponds to no known actual Crdt type. Something went wrong during code generation");
        }
{{~ end ~}}
{{~ end ~}}

        private async IAsyncEnumerable<TDto> EnumerateCrdtAsync<TCrdt, TDto>(IAsyncEnumerable<TDto> dtos, CallContext context = default)
            where TCrdt : ManagedCRDT<TDto>
        {
            var instanceIdStr = context.RequestHeaders.GetValue("instance-id");
            if (string.IsNullOrEmpty(instanceIdStr))
            {
                throw new GeneratedCodeExpectationsViolatedException($"Method {nameof(EnumerateCrdtAsync)} expected an InstanceId header to be present, but found none");
            }

            var instanceId = new InstanceId(instanceIdStr);

            await foreach(var dto in dtos)
            {
                _logger.LogDebug("Received dto during sync for id='{Id}': {Dto}", instanceId, JsonConvert.SerializeObject(dto));

                await _context.MergeAsync<TCrdt, TDto>(dto,
                    instanceId,
                    allowPropagation: false,
                    cancellationToken: context.CancellationToken);
            }

            await foreach(var dto in _context.EnumerateDtoBatchesAsync<TCrdt, TDto>(instanceId, context.CancellationToken))
            {
                _logger.LogDebug("Sending dto during sync for id='{Id}': {Dto}", instanceId, JsonConvert.SerializeObject(dto));
                yield return dto;
            }
        }
    }
}